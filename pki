#!/bin/bash
clear 
echo ""
echo ""
echo ""   
echo -e " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñë    ‚ñë‚ñë‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà     ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà 
 ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà       ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñë    ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà  ‚ñà ‚ñë     ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  
 ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà        ‚ñë‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë     ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà      ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà   
 ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë      ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà       ‚ñë‚ñà‚ñà‚ñà      ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà      ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà       ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà  
 ‚ñë‚ñà‚ñà‚ñà            ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà      ‚ñë‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà      ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë       ‚ñë‚ñà‚ñà‚ñà ‚ñë   ‚ñà    ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà 
 ‚ñà‚ñà‚ñà‚ñà‚ñà           ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñë‚ñë‚ñà‚ñà‚ñà         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñë‚ñë‚ñë‚ñë‚ñë           ‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë     ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë     ‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë         ‚ñë‚ñë‚ñë         ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë      ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë      ‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë "   
echo ""   
echo ""   
echo ""

setup_dirs() {
  read -p "Entrez le repertoire de base (chemin complet ex: /home/kali/project/p (par defaut)) : " BASE_DIR
  nouvelle_phrase="dir             = $BASE_DIR                # Where everything is kept"
  ancienne_phrase="dir             = /usr/local/ssl                # Where everything is kept"
  ancienne_phrase1="dir             = /home/anas/ssl                # Where everything is kept"

  # Effectue le remplacement dans les fichiers de configuration
  sed -i "s|$ancienne_phrase|$nouvelle_phrase|g" ca-server-cert.cnf
  sed -i "s|$ancienne_phrase1|$nouvelle_phrase|g" ca-subca-cert.cnf
  sed -i "s|$ancienne_phrase|$nouvelle_phrase|g" ca-user-cert.cnf
  if [ ! -d "$BASE_DIR" ]; then
    echo "[+] Le dossier '$BASE_DIR' n'existe pas. Cr√©ation en cours..."
    mkdir -p "$BASE_DIR"
  else
    echo "[+] Le dossier '$dir' existe d√©j√†."
  fi
  cp ca-server-cert.cnf ca-subca-cert.cnf ca-user-cert.cnf req-server-cert.cnf req-subca-cert.cnf req-user-cert.cnf root-ca-cert.cnf "$BASE_DIR"
  echo "[+] Cr√©ation de la structure de dossiers dans $BASE_DIR"
  mkdir -p "$BASE_DIR"/{certs,crl,newcerts,private,req}
  cd "$BASE_DIR" || exit 1
  chmod 700 private
  echo "01" > serial
  touch index.txt
  echo "[+] Structure pr√™te"
}

create_root_ca() {
  echo "[+] Cr√©ation de la cl√© priv√©e et certificat auto-sign√© de la Root CA"
  read -p "Nombre de jours de validit√© : " nb
  openssl req -x509 -config root-ca-cert.cnf -newkey rsa:2048 -days "$nb" -keyout private/ca.key -out certs/ca.pem
  echo "[+] V√©rification du certificat Root CA"
  openssl x509 -in certs/ca.pem -noout -text | head -20
  echo "[+] Cr√©ation des liens symboliques pour Root CA"
  cd certs || exit 1
  ln -sf ca.pem "$(openssl x509 -in ca.pem -noout -hash).0"
  cd ..
}

create_server_ca() {
  echo "[+] Cr√©ation cl√© priv√©e et CSR pour Server CA"
  openssl req -config req-subca-cert.cnf -newkey rsa:2048 -keyout private/server_ca.key -out req/serverca.pem

  echo "[+] Signature du CSR Server CA avec la Root CA"
  openssl ca -config ca-subca-cert.cnf -in req/serverca.pem -out certs/server_ca.pem

  echo "[+] V√©rification du certificat Server CA"
  openssl x509 -in certs/server_ca.pem -noout -text | head -20
  cd certs || exit 1
  echo "[+] Cr√©ation des liens symboliques pour Server CA"
  ln -sf server_ca.pem "$(openssl x509 -in server_ca.pem -noout -hash).0"
  cd ..
}

create_server_cert() {
  read -p "Nommez votre certificat : " nm
  key = "server_${nm}.key"
  cert = "server_${nm}.pem"
  req = "req_server_${nm}.pem"
  echo "[+] Cr√©ation cl√© priv√©e et CSR pour serveur final"
  openssl req -config req-server-cert.cnf -newkey rsa:2048 -keyout "private/${key}" -out "req/${req}"

  echo "[+] Signature du CSR serveur avec la Server CA"
  openssl ca -config ca-server-cert.cnf -cert certs/server_ca.pem -keyfile private/server_ca.key -in "req/${req}" -out "certs/${cert}" -notext
  echo "[+] V√©rification du certificat serveur"
  openssl x509 -in "certs/${cert}" -noout -text | head -20
  cd certs || exit 1
  echo "[+] Cr√©ation des liens symboliques pour Server final"
  ln -sf server.pem "$(openssl x509 -in server.pem -noout -hash).0"
  }
create() {
  echo "[+] Avez vous verifier les repertoirs dans les dossier de configuration ?"
  read -p "[+] Entrez le repertoire de base (chemin complet ex: /home/kali/project/p (par defaut)) : " BASE_DIR
  cd "$BASE_DIR"
  read -p "Nommez votre certificat du seveur final : " nm
  key="server_${nm}.key"
  cert="server_${nm}.pem"
  req="req_server_${nm}.pem"
  echo "[+] Cr√©ation des dossiers si n√©cessaire"
  mkdir -p private req certs

  echo "[+] Cr√©ation cl√© priv√©e et CSR pour serveur final"
  openssl req -config req-server-cert.cnf \
    -newkey rsa:2048 \
    -keyout "private/${key}" \
    -out "req/${req}" || { echo "[-] √âchec de cr√©ation du CSR"; return 1; }

  echo "[+] Signature du CSR serveur avec la Server CA"
  openssl ca -batch -config ca-server-cert.cnf \
    -cert certs/server_ca.pem \
    -keyfile private/server_ca.key \
    -in "req/${req}" \
    -out "certs/${cert}" \
    -notext || { echo "[-] √âchec de la signature"; return 1; }

  echo "[+] V√©rification du certificat serveur"
  openssl x509 -in "certs/${cert}" -noout -text | head -20

  echo "[+] Cr√©ation des liens symboliques pour Server final"
  cd certs || { echo "[-] Impossible d'acc√©der au dossier certs"; return 1; }
  ln -sf "${cert}" "$(openssl x509 -in ${cert} -noout -hash).0"
  cd ..
}

createChain() {
echo "[+] Avez vous verifier les repertoirs dans les dossier de configuration (verification de validit√© de certificat) ?"
read -p "[+] Entrez le repertoire de base (chemin complet ex: /home/kali/project/p (par defaut)) : " BASE_DIR
cd "$BASE_DIR"
  echo "Assurez-vous que votre certificat est bien pr√©sent dans le r√©pertoire certs/"
  read -p "Nom du certificat √† v√©rifier (doit √™tre cr√©√© par l'autorit√© de cette PKI) : " nm
  echo "[+] Cr√©ation de la cha√Æne de certification"
  cat certs/server_ca.pem certs/ca.pem > chain.pem
  echo "[+] V√©rification de la cha√Æne"
  openssl verify -CAfile chain.pem "certs/$nm"
}

main() {
  setup_dirs
  create_root_ca
  create_server_ca
  create
  createChain
}

check(){ echo "[+] Avez vous verifier les repertoirs dans les dossier de configuration ?"
read -p "[+] Entrez le repertoire de base (chemin complet ex: /home/kali/project/p (par defaut)) : " BASE_DIR

}
while true; do
  echo ""
  echo -e "\e[1;36m====== PKI 3 niveaux OpenSSL ======\e[0m"
  echo "------------- Avant de commencer --------------"
  echo "Avant de commencer, notez que le bon fonctionnement de cet outil d√©pend des chemins configur√©s. Il est essentiel d‚Äôouvrir les fichiers ca-server-cert.cnf, ca-subca-cert.cnf et ca-user-cert.cnf avec un √©diteur de texte et de modifier manuellement la valeur de la variable $dir (ex. : /home/kali/project/p), car le script peut √©chouer √† le faire automatiquement. Pour v√©rifier un certificat, assurez-vous d‚Äô√™tre dans le r√©pertoire du projet (vous devez voir les dossiers certs, newcerts, etc. en ex√©cutant ls), placez le certificat √† v√©rifier dans le dossier certs/, puis lancez la v√©rification. Elle retournera 'OK' si le certificat a √©t√© g√©n√©r√© par la PKI actuelle, ou une erreur dans le cas contraire."
  echo "----------------------------------------------" 
  echo "1. Cr√©er votre Public Key Infrastructure (PKI) pour cr√©er des certificats num√©riques"
  echo "2. Cr√©er un certificat"
  echo "3. V√©rifier un certificat"
  echo "4. Retour"
  echo "Ce script utilise des fichiers de config extraits de /etc/ssl/openssl.conf"
  echo "Veuillez lire ces fichiers dans le dossier conf et ajuster les champs de config selon vos besoins"
  echo "==========================================="
  read -p "üéØ Ton choix : " choix

  case "$choix" in
    1) clear ; main ;cd .. ;;
    2) clear ; create ;cd .. ;;
    3) clear ;createChain ;cd .. ;;
    4) echo "‚Ü© Retour au menu pr√©c√©dent..."; clear ; bash ./project ; break ;;
    *) echo "‚ùå Choix invalide." ;;
  esac
done
